import pandas as pd
from statistics import median, mode

# Read the CSV file
df = pd.read_csv('data.csv')

# Display the initial DataFrame
print("Initial DataFrame:")
print(df.head())
print()

# Handle missing values
# Replace NaN in 'cgpa' with the median value of the 'cgpa' column
if 'cgpa' in df.columns:
    cgpa_median = df['cgpa'].median()  # Calculate median for replacement
    df['cgpa'].fillna(cgpa_median, inplace=True)
    print(f"Missing values in 'cgpa' column replaced with median value: {cgpa_median}")
else:
    print("'cgpa' column not found in the DataFrame.")

# Replace NaN in 'students' with a placeholder text
if 'students' in df.columns:
    df['students'].fillna('Unknown', inplace=True)
    print("Missing values in 'students' column replaced with 'Unknown'.")
else:
    print("'students' column not found in the DataFrame.")
print()

# Extract the 'cgpa' column for median and mode calculations
cgpa_values = df['cgpa']

# Calculate the median and mode
cgpa_median = median(cgpa_values)
try:
    cgpa_mode = mode(cgpa_values)
except:
    cgpa_mode = 'No unique mode'  # Handle case where mode is not unique

print(f"Median CGPA: {cgpa_median}")
print(f"Mode CGPA: {cgpa_mode}")
print()

# Demonstrate dictionary operations
# Convert DataFrame to a dictionary
data_dict = df.to_dict(orient='list')
print("Dictionary representation of DataFrame:")
print(data_dict)
print()

# Convert a dictionary to a DataFrame (example)
new_data_dict = {
    'students': ['David', 'Eva'],
    'cgpa': [3.6, 3.7],
    'behaviour': ['Good', 'Excellent']
}
new_df = pd.DataFrame(new_data_dict)

# Append new data to the original DataFrame
appended_df = pd.concat([df, new_df], ignore_index=True)
print("DataFrame after appending new data:")
print(appended_df.head())
print()

# Add a new column with a default value
appended_df['new_column'] = 'Default Value'
print("DataFrame with new column 'new_column' added:")
print(appended_df.head())
print()

# Add a new row with specific values
new_row = pd.DataFrame({
    'students': ['John Doe'],
    'cgpa': [4.0],
    'behaviour': ['Excellent'],
    'new_column': ['Special Value']
})

# Concatenate the new row with the existing DataFrame
appended_df = pd.concat([appended_df, new_row], ignore_index=True)
print("DataFrame after adding a new row:")
print(appended_df.tail())
print()

# Check if 'students' column exists before converting to a list
if 'students' in df.columns:
    # Demonstrate list operations
    names_list = df['students'].tolist()
    print("List of students from DataFrame:")
    print(names_list)
    print()
else:
    print("Column 'students' does not exist in the DataFrame.")
    print()

# Indexing example: Get the first row of the DataFrame
first_row = df.iloc[0]
print("First row of the DataFrame:")
print(first_row)
print()

# Save the modified DataFrame to a new CSV file
appended_df.to_csv('modified_data_with_new_entries.csv', index=False)

print("All operations completed and results saved to 'modified_data_with_new_entries.csv'.")



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OUTPUT:
Initial DataFrame:
    students  cgpa behaviour
0     rephin  1.27     worst
1  narayanan  9.00      good
2   srikanth  8.90       mid
3       aqua  9.90      good
4   sanjay s  8.30      good

Filtered DataFrame (CGPA > 3.7):
    students  cgpa behaviour
1  narayanan   9.0      good
2   srikanth   8.9       mid
3       aqua   9.9      good
4   sanjay s   8.3      good
5       hiba   8.7      good

Average CGPA: 7.678333333333335

DataFrame with 'is_excellent' column added:
    students  cgpa behaviour  is_excellent
0     rephin  1.27     worst         False
1  narayanan  9.00      good         False
2   srikanth  8.90       mid         False
3       aqua  9.90      good         False
4   sanjay s  8.30      good         False

DataFrame with missing values handled:
    students  cgpa behaviour  is_excellent
0     rephin  1.27     worst         False
1  narayanan  9.00      good         False
2   srikanth  8.90       mid         False
3       aqua  9.90      good         False
4   sanjay s  8.30      good         False

Sorted DataFrame by CGPA (Descending):
    students  cgpa behaviour  is_excellent
3       aqua   9.9      good         False
1  narayanan   9.0      good         False
2   srikanth   8.9       mid         False
5       hiba   8.7      good         False
4   sanjay s   8.3      good         False

Grouped DataFrame (Average CGPA by Behaviour):
  behaviour   cgpa
0      good  8.975
1       mid  8.900
2     worst  1.270

All operations completed and results saved to new CSV files.
